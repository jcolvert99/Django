webapp- stored on a remote server and made available to user through an internet browser
    - equivalent webapp to excel- google sheets
    - don't have to install on your local machine
    - updates automatically
    - to operate, needs a web server, application server, and a database

****2 types of request- get request and post request:
    - 1. get- initial webpage is loaded (gets info from database)
        - flows from webserver -----> webpage
        - get data from the database (reading)
    - 2. post- sends updated information to the database and posts it
        - flows from webpage -----> webserver
        - writing data to the database

benefits of web apps
    - allowing multiple users access to the same version of the application
    - don't need to download app (constant get and post requests)

Django- python library used to build web apps
    - server-side web framework
    - we will create a learning log- online journal that lets you keep track of info you've learned about particular topics

URLs will be the access location of the webpages

models.py- where we write the code to define all of our "tables" (objects)
    - defines the data we want to manage in our app in the form of a class
view.py- interacts with webpage

use "pip freeze > requirements.txt" to save a requirements file with all used libraries

migrate command is used to modify a database
    - when used for the first time, it creates a SQLite database which runs off a single file

2 steps to storing the information on the database
    1. makemigrations: this command creates a migration file that instructs the database to store any data associated with any new models
    2. migrate: this command applies the changes in the migration file previosuly created

admin site- makes it easy to work with your models- has access to all info on the site

Must use the admin.py file to post the changes to the webpage

Everytime you make a change to the models file, you must repeat the migrations steps

if on personal computer, must download DB broswer for SQLite- allows you to view your tables you created

db.sqlite3 is the back-end database



Making pages- consists of three stages:
    1. defining URLs (add the URL to the urls file)
    2. writing views (define a topics function in the views file)
    3. writing templates
each URL maps to a view which uses a template to structure the page
    - process- url calls the view, view calls the databse and retrieves info, view assigns data to a template, template is shown on browser

Example of adding page- topics page
    1. add topics url to urls.py (under learning logs)
    2. define a topics function in the views.py file
    3. create the topics template topics.html that inherits from base.html

render function- renders to browser using template

to fill out a template file with data- use a dictionary:
    key represents a variable name to use in template
    value reprsents a variable name to use in views

when creating the html template under the templates folder, name it the same as in url and view

template tages- {%     %} 
tempalte variables- {{     }}


forms- allow us to receive input from any user across the world and process it
    - allos users to create their own entries, whereas static web pages are only for informational purposes


Don't have to use the views for user accounts because using django authentication

Decorator- come before a function and must be completed for function to execute (for security)